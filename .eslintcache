[{"/home/marcel/Documents/dci/react-exercices/react-calculator/src/index.js":"1","/home/marcel/Documents/dci/react-exercices/react-calculator/src/App.js":"2","/home/marcel/Documents/dci/react-exercices/react-calculator/src/components/Calculator.js":"3","/home/marcel/Documents/dci/react-exercices/react-calculator/src/components/Display.js":"4"},{"size":156,"mtime":1666870289650,"results":"5","hashOfConfig":"6"},{"size":220,"mtime":1666871717911,"results":"7","hashOfConfig":"6"},{"size":4108,"mtime":1667293994290,"results":"8","hashOfConfig":"6"},{"size":308,"mtime":1667038284779,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1wrkklb",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/marcel/Documents/dci/react-exercices/react-calculator/src/index.js",[],["20","21"],"/home/marcel/Documents/dci/react-exercices/react-calculator/src/App.js",[],"/home/marcel/Documents/dci/react-exercices/react-calculator/src/components/Calculator.js",["22","23","24","25","26","27"],"import Display from './Display'\nimport './calculator.css'\nimport { useState } from 'react';\n\nfunction Calculator () {\n    const [number, setNumber] = useState([0])\n    const [firstNumber, setfirstNumber] = useState(\"\")\n    const [operator, setOperator] = useState(\"\")\n    console.log(number, firstNumber)\n\n    const handleOperator = (event) => {\n        setOperator(event.target.value);\n        setfirstNumber(number.join(\"\"))\n        setNumber([])\n    };\n    \n    const handleNumber = (event) => {\n        if(event.target.value == \"0\" && number == \"0\"){\n            return  number;\n        } \n        if(event.target.value !== \"0\" && number == \"0\"){\n            return setNumber([event.target.value]);\n        } \n        if(event.target.value == \".\" && number.includes(\".\")){\n            return number;\n        } \n        return setNumber((number) => [ ...number, event.target.value,]);\n    }\n    const handleAC = () => {\n        setNumber([\"0\"]);\n        setfirstNumber(\"\")\n        setOperator(\"\")\n    }\n    const handleMinus = () => {\n        const result = +number.join(\"\") * -1\n        setNumber(([]) => [ ...[], result]);\n    }\n    const handlePorcent = () => {\n        const result = +number.join(\"\") / 100\n        setNumber(([]) => [ ...[], result]);\n    }\n\n    const calculate = () => {\n        switch (operator) {\n            case \"+\":\n                setNumber([(+firstNumber + +number.join(\"\"))])\n                setfirstNumber(\"\")\n                setOperator(\"\")\n                break;\n            case \"-\":\n                setNumber([(+firstNumber - +number.join(\"\"))])\n                setfirstNumber(\"\")\n                setOperator(\"\")\n                break;\n            case \"*\":\n                setNumber([(+firstNumber * +number.join(\"\"))])\n                setfirstNumber(\"\")\n                setOperator(\"\")\n                break;\n            case \"/\":\n                setNumber([(+firstNumber / +number.join(\"\"))])\n                setfirstNumber(\"\")\n                setOperator(\"\")\n                break;\n            case \"%\":\n                setNumber([(+firstNumber % +number.join(\"\"))])\n                setfirstNumber(\"\")\n                setOperator(\"\")\n                break;\n           \n            default:\n                console.log(`please choose an operator`);\n\n        }\n    }\n    return (\n        <div className='Calculator'>\n            <Display previous={number} oper={operator} current={firstNumber}/>\n            <div className=\"Keypad\">\n                <button onClick={handleAC} value=\"AC\">C</button>\n                <button onClick={handleMinus} name= \"operator\" value=\"+/-\">+/-</button>\n                <button onClick={handlePorcent} name= \"operator\" value=\"%\">%</button>\n                <button onClick={handleOperator} name= \"operator\" value=\"/\">/</button>\n                <button onClick={handleNumber} name= \"number\" value=\"7\">7</button>\n                <button onClick={handleNumber} name= \"number\" value=\"8\">8</button>\n                <button onClick={handleNumber} name= \"number\" value=\"9\">9</button>\n                <button onClick={handleOperator} name= \"operator\" value=\"*\">*</button>\n                <button onClick={handleNumber} name= \"number\" value=\"4\">4</button>\n                <button onClick={handleNumber} name= \"number\"value=\"5\">5</button>\n                <button onClick={handleNumber} name= \"number\" value=\"6\">6</button>\n                <button onClick={handleOperator} name= \"operator\" value=\"-\">-</button>\n                <button onClick={handleNumber} name= \"number\" value=\"1\">1</button>\n                <button onClick={handleNumber} name= \"number\" value=\"2\">2</button>\n                <button onClick={handleNumber} name= \"number\" value=\"3\">3</button>\n                <button onClick={handleOperator} name= \"operator\" value=\"+\">+</button>\n                <button onClick={handleNumber} name= \"number\" value=\"0\">0</button>\n                <button onClick={handleNumber} value=\".\">.</button>\n                <button onClick={calculate} className=\"equal\" value=\"=\">=</button>\n            </div>\n        </div>\n    )\n}\nexport default Calculator;","/home/marcel/Documents/dci/react-exercices/react-calculator/src/components/Display.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":18,"column":31,"nodeType":"34","messageId":"35","endLine":18,"endColumn":33},{"ruleId":"32","severity":1,"message":"33","line":18,"column":48,"nodeType":"34","messageId":"35","endLine":18,"endColumn":50},{"ruleId":"32","severity":1,"message":"33","line":21,"column":49,"nodeType":"34","messageId":"35","endLine":21,"endColumn":51},{"ruleId":"32","severity":1,"message":"33","line":24,"column":31,"nodeType":"34","messageId":"35","endLine":24,"endColumn":33},{"ruleId":"36","severity":1,"message":"37","line":36,"column":20,"nodeType":"38","messageId":"35","endLine":36,"endColumn":22},{"ruleId":"36","severity":1,"message":"37","line":40,"column":20,"nodeType":"38","messageId":"35","endLine":40,"endColumn":22},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-empty-pattern","Unexpected empty array pattern.","ArrayPattern","no-global-assign","no-unsafe-negation"]